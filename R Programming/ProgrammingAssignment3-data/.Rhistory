tail(rankall("heart failure"), 10)
##The function reads the outcome-of-care-measures.csv file and returns a 2-column data frame
##containing the hospital in each state that has the ranking specified in num.
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
if (!(state %in% unique(data$State))) {
stop("Invalid state")
}
if (!(outcome %in% c("heart attack", "heart failure", "pneumonia"))) {
stop("Invalid outcome")
}
if (num > nrow(data)){return("NA")}
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
hospitals = NULL
states = NULL
for (state in unique(data$State)){
state_data <- data[data$State == state,]
if (outcome == "heart attack") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
}
if (outcome == "heart failure") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
}
if (outcome == "pneumonia") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
}
outcome_Hname <- transform.data.frame(outcome_Hname, Deaths = as.numeric(as.character(Deaths)))
sorted <- outcome_Hname[order(outcome_Hname[,2], outcome_Hname[,1]),]
sorted <- na.omit(sorted)
print(num)
if (num == "best"){
print("YES")
print(sorted$Hospital.Names[1])
hospitals <- c(hospitals, toString(sorted$Hospital.Names[1]))
}
else if (num == "worst"){
print("YES")
hospitals <- c(hospitals, toString(sorted$Hospital.Names[nrow(sorted)]))
}
else{
hospitals <- c(hospitals, toString(sorted$Hospital.Names[num]))
}
states <- c(states, state)
# end of for loop
}
data.frame(states,hospitals)
}
## head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
##The function reads the outcome-of-care-measures.csv file and returns a 2-column data frame
##containing the hospital in each state that has the ranking specified in num.
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
if (!(state %in% unique(data$State))) {
stop("Invalid state")
}
if (!(outcome %in% c("heart attack", "heart failure", "pneumonia"))) {
stop("Invalid outcome")
}
print(num)
if (num > nrow(data)){return("NA")}
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
hospitals = NULL
states = NULL
for (state in unique(data$State)){
state_data <- data[data$State == state,]
if (outcome == "heart attack") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
}
if (outcome == "heart failure") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
}
if (outcome == "pneumonia") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
}
outcome_Hname <- transform.data.frame(outcome_Hname, Deaths = as.numeric(as.character(Deaths)))
sorted <- outcome_Hname[order(outcome_Hname[,2], outcome_Hname[,1]),]
sorted <- na.omit(sorted)
print(num)
if (num == "best"){
print("YES")
print(sorted$Hospital.Names[1])
hospitals <- c(hospitals, toString(sorted$Hospital.Names[1]))
}
else if (num == "worst"){
print("YES")
hospitals <- c(hospitals, toString(sorted$Hospital.Names[nrow(sorted)]))
}
else{
hospitals <- c(hospitals, toString(sorted$Hospital.Names[num]))
}
states <- c(states, state)
# end of for loop
}
data.frame(states,hospitals)
}
## head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
##The function reads the outcome-of-care-measures.csv file and returns a 2-column data frame
##containing the hospital in each state that has the ranking specified in num.
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
if (!(state %in% unique(data$State))) {
stop("Invalid state")
}
if (!(outcome %in% c("heart attack", "heart failure", "pneumonia"))) {
stop("Invalid outcome")
}
print(num > nrow(data))
if (num > nrow(data)){return("NA")}
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
hospitals = NULL
states = NULL
for (state in unique(data$State)){
state_data <- data[data$State == state,]
if (outcome == "heart attack") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
}
if (outcome == "heart failure") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
}
if (outcome == "pneumonia") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
}
outcome_Hname <- transform.data.frame(outcome_Hname, Deaths = as.numeric(as.character(Deaths)))
sorted <- outcome_Hname[order(outcome_Hname[,2], outcome_Hname[,1]),]
sorted <- na.omit(sorted)
print(num)
if (num == "best"){
print("YES")
print(sorted$Hospital.Names[1])
hospitals <- c(hospitals, toString(sorted$Hospital.Names[1]))
}
else if (num == "worst"){
print("YES")
hospitals <- c(hospitals, toString(sorted$Hospital.Names[nrow(sorted)]))
}
else{
hospitals <- c(hospitals, toString(sorted$Hospital.Names[num]))
}
states <- c(states, state)
# end of for loop
}
data.frame(states,hospitals)
}
## head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
##The function reads the outcome-of-care-measures.csv file and returns a 2-column data frame
##containing the hospital in each state that has the ranking specified in num.
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
if (!(state %in% unique(data$State))) {
stop("Invalid state")
}
if (!(outcome %in% c("heart attack", "heart failure", "pneumonia"))) {
stop("Invalid outcome")
}
if (num >> nrow(data)){return("NA")}
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
hospitals = NULL
states = NULL
for (state in unique(data$State)){
state_data <- data[data$State == state,]
if (outcome == "heart attack") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
}
if (outcome == "heart failure") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
}
if (outcome == "pneumonia") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
}
outcome_Hname <- transform.data.frame(outcome_Hname, Deaths = as.numeric(as.character(Deaths)))
sorted <- outcome_Hname[order(outcome_Hname[,2], outcome_Hname[,1]),]
sorted <- na.omit(sorted)
print(num)
if (num == "best"){
print("YES")
print(sorted$Hospital.Names[1])
hospitals <- c(hospitals, toString(sorted$Hospital.Names[1]))
}
else if (num == "worst"){
print("YES")
hospitals <- c(hospitals, toString(sorted$Hospital.Names[nrow(sorted)]))
}
else{
hospitals <- c(hospitals, toString(sorted$Hospital.Names[num]))
}
states <- c(states, state)
# end of for loop
}
data.frame(states,hospitals)
}
## head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
typeof(1)
##The function reads the outcome-of-care-measures.csv file and returns a 2-column data frame
##containing the hospital in each state that has the ranking specified in num.
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
if (!(state %in% unique(data$State))) {
stop("Invalid state")
}
if (!(outcome %in% c("heart attack", "heart failure", "pneumonia"))) {
stop("Invalid outcome")
}
if (typeof(num) == "double" && num > nrow(data)){return("NA")}
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
hospitals = NULL
states = NULL
for (state in unique(data$State)){
state_data <- data[data$State == state,]
if (outcome == "heart attack") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
}
if (outcome == "heart failure") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
}
if (outcome == "pneumonia") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
}
outcome_Hname <- transform.data.frame(outcome_Hname, Deaths = as.numeric(as.character(Deaths)))
sorted <- outcome_Hname[order(outcome_Hname[,2], outcome_Hname[,1]),]
sorted <- na.omit(sorted)
print(num)
if (num == "best"){
print("YES")
print(sorted$Hospital.Names[1])
hospitals <- c(hospitals, toString(sorted$Hospital.Names[1]))
}
else if (num == "worst"){
print("YES")
hospitals <- c(hospitals, toString(sorted$Hospital.Names[nrow(sorted)]))
}
else{
hospitals <- c(hospitals, toString(sorted$Hospital.Names[num]))
}
states <- c(states, state)
# end of for loop
}
data.frame(states,hospitals)
}
## head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
##The function reads the outcome-of-care-measures.csv file and returns a 2-column data frame
##containing the hospital in each state that has the ranking specified in num.
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
if (!(state %in% unique(data$State))) {
stop("Invalid state")
}
if (!(outcome %in% c("heart attack", "heart failure", "pneumonia"))) {
stop("Invalid outcome")
}
if (typeof(num) == "double" && num > nrow(data)){return("NA")}
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
hospitals = NULL
states = NULL
for (state in unique(data$State)){
state_data <- data[data$State == state,]
if (outcome == "heart attack") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
}
if (outcome == "heart failure") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
}
if (outcome == "pneumonia") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
}
outcome_Hname <- transform.data.frame(outcome_Hname, Deaths = as.numeric(as.character(Deaths)))
sorted <- outcome_Hname[order(outcome_Hname[,2], outcome_Hname[,1]),]
sorted <- na.omit(sorted)
print(num)
if (num == "best"){
print(sorted$Hospital.Names[1])
hospitals <- c(hospitals, toString(sorted$Hospital.Names[1]))
}
else if (num == "worst"){
hospitals <- c(hospitals, toString(sorted$Hospital.Names[nrow(sorted)]))
}
else{
hospitals <- c(hospitals, toString(sorted$Hospital.Names[num]))
}
states <- c(states, state)
# end of for loop
}
data.frame(states,hospitals)
}
## head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
##The function reads the outcome-of-care-measures.csv file and returns a 2-column data frame
##containing the hospital in each state that has the ranking specified in num.
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
if (!(state %in% unique(data$State))) {
stop("Invalid state")
}
if (!(outcome %in% c("heart attack", "heart failure", "pneumonia"))) {
stop("Invalid outcome")
}
if (typeof(num) == "double" && num > nrow(data)){return("NA")}
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
hospitals = NULL
states = NULL
for (state in unique(data$State)){
state_data <- data[data$State == state,]
if (outcome == "heart attack") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
}
if (outcome == "heart failure") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
}
if (outcome == "pneumonia") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
}
outcome_Hname <- transform.data.frame(outcome_Hname, Deaths = as.numeric(as.character(Deaths)))
sorted <- outcome_Hname[order(outcome_Hname[,2], outcome_Hname[,1]),]
sorted <- na.omit(sorted)
if (num == "best"){
hospitals <- c(hospitals, toString(sorted$Hospital.Names[1]))
}
else if (num == "worst"){
hospitals <- c(hospitals, toString(sorted$Hospital.Names[nrow(sorted)]))
}
else{
hospitals <- c(hospitals, toString(sorted$Hospital.Names[num]))
}
states <- c(states, state)
# end of for loop
}
data.frame(states,hospitals)
}
## head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
best("SC", "heart attack")
## The function reads the outcome-of-care-measures.csv file and returns a character vector
## with the name of the hospital that has the best (i.e. lowest) 30-day mortality for the
## specified outcome in that state
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
if (!(state %in% unique(data$State))) {
stop("Invalid state")
}
if (!(outcome %in% c("heart attack", "heart failure", "pneumonia"))) {
stop("Invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
state_data <- data[data$State == state,]
if (outcome == "heart attack") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
}
if (outcome == "heart failure") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
}
if (outcome == "pneumonia") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
}
na.omit(outcome_Hname)
outcome_Hname <- transform.data.frame(outcome_Hname, Deaths = as.numeric(as.character(Deaths)))
sorted <- outcome_Hname[order(outcome_Hname[,2], outcome_Hname[,1]),]
sorted$Hospital.Name[[1]]
}
#Test Cases:
##best("TX", "heart attack")
##best("TX", "heart failure")
##best("MD", "heart attack")
##best("MD", "pneumonia")
##best("BB", "heart attack")
##best("NY", "hert attack")
##The function reads the outcome-of-care-measures.csv file and returns a 2-column data frame
##containing the hospital in each state that has the ranking specified in num.
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
if (!(state %in% unique(data$State))) {
stop("Invalid state")
}
if (!(outcome %in% c("heart attack", "heart failure", "pneumonia"))) {
stop("Invalid outcome")
}
if (typeof(num) == "double" && num > nrow(data)){return("NA")}
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
hospitals = NULL
states = NULL
for (state in unique(data$State)){
state_data <- data[data$State == state,]
if (outcome == "heart attack") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
}
if (outcome == "heart failure") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
}
if (outcome == "pneumonia") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
}
outcome_Hname <- transform.data.frame(outcome_Hname, Deaths = as.numeric(as.character(Deaths)))
sorted <- outcome_Hname[order(outcome_Hname[,2], outcome_Hname[,1]),]
sorted <- na.omit(sorted)
if (num == "best"){
hospitals <- c(hospitals, toString(sorted$Hospital.Names[1]))
}
else if (num == "worst"){
hospitals <- c(hospitals, toString(sorted$Hospital.Names[nrow(sorted)]))
}
else{
hospitals <- c(hospitals, toString(sorted$Hospital.Names[num]))
}
states <- c(states, state)
# end of for loop
}
data.frame(states,hospitals)
}
## Test Cases
## head(rankall("heart attack", 20), 10)
## tail(rankall("pneumonia", "worst"), 3)
## tail(rankall("heart failure"), 10)
## Return hospital name in that state with the given rank 30-day death rate
state_data <- data[data$State == state,]
## The function reads the outcome-of-care-measures.csv file and returns
## a character vector with the name of the hospital that has the ranking
## specified by the num argument.
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
if (!(state %in% unique(data$State))) {
stop("Invalid state")
}
if (!(outcome %in% c("heart attack", "heart failure", "pneumonia"))) {
stop("Invalid outcome")
}
if (typeof(num) == "double" && num > nrow(data)){return("NA")}
## Return hospital name in that state with the given rank 30-day death rate
state_data <- data[data$State == state,]
if (outcome == "heart attack") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
}
if (outcome == "heart failure") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
}
if (outcome == "pneumonia") {
outcome_Hname <- data.frame(Hospital.Names = state_data$Hospital.Name , Deaths = state_data$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
}
outcome_Hname <- transform.data.frame(outcome_Hname, Deaths = as.numeric(as.character(Deaths)))
sorted <- outcome_Hname[order(outcome_Hname[,2], outcome_Hname[,1]),]
sorted <- na.omit(sorted)
if (num == "best"){return(sorted$Hospital.Names[1])}
if (num == "worst"){return(sorted$Hospital.Names[nrow(sorted)])}
sorted$Hospital.Names[num]
}
## Test cases:
##rankhospital("TX", "heart failure", 4)
##rankhospital("MD", "heart attack", "worst")
##rankhospital("MN", "heart attack", 5000)
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r
r <- rankall("heart failure", 10)
r
